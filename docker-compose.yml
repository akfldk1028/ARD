name: ARD

services:
  # Django ARD API 서비스
  backend:
    image: ard-api:v14
    container_name: ARD-BACKEND
    ports:
      - "8000:8000"
    volumes:
      # 실제 MPS 샘플 데이터 영구 저장
      - ard_data:/app/ARD/data
      # PostgreSQL 데이터와 동기화
      - ard_logs:/app/logs
    environment:
      - DEBUG=1
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend
      # PostgreSQL 설정
      - DB_ENGINE=django.db.backends.postgresql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ard_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      # Kafka 설정 (새 Kafka 컨테이너 연결)
      - KAFKA_BOOTSTRAP_SERVERS=ARD_KAFKA:9092
      - KAFKA_GROUP_ID=ard-consumer-group
    extra_hosts:
      # Docker 외부의 서비스들에 접근 (Kafka, PostgreSQL 등)
      - "host.docker.internal:host-gateway"
    depends_on:
      - postgres
    networks:
      - ard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/aria/sessions/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: ARD-POSTGRES
    environment:
      POSTGRES_DB: ard_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3



volumes:
  postgres_data:
  ard_data:
  ard_logs:

networks:
  ard-network:
    driver: bridge