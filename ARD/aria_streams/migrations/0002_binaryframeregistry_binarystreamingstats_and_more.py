# Generated by Django 5.2.4 on 2025-08-01 14:01

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('aria_streams', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BinaryFrameRegistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frame_id', models.CharField(db_index=True, max_length=200, unique=True)),
                ('session_id', models.CharField(db_index=True, max_length=100)),
                ('stream_id', models.CharField(max_length=20)),
                ('frame_index', models.IntegerField()),
                ('metadata_topic', models.CharField(default='vrs-metadata-stream', max_length=100)),
                ('binary_topic', models.CharField(default='vrs-binary-stream', max_length=100)),
                ('registry_topic', models.CharField(default='vrs-frame-registry', max_length=100)),
                ('metadata_offset', models.BigIntegerField(blank=True, null=True)),
                ('binary_offset', models.BigIntegerField(blank=True, null=True)),
                ('registry_offset', models.BigIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('LINKED', 'Linked'), ('PROCESSED', 'Processed'), ('FAILED', 'Failed'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('linked_at', models.DateTimeField(blank=True, null=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('size_bytes', models.BigIntegerField(blank=True, null=True)),
                ('compression_format', models.CharField(blank=True, max_length=20, null=True)),
                ('compression_ratio', models.FloatField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('retry_count', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'binary_frame_registry',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['session_id', 'stream_id', 'frame_index'], name='binary_fram_session_df6728_idx'), models.Index(fields=['status', 'created_at'], name='binary_fram_status_0672f4_idx'), models.Index(fields=['frame_id'], name='binary_fram_frame_i_38bd32_idx')],
            },
        ),
        migrations.CreateModel(
            name='BinaryStreamingStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(db_index=True, max_length=100)),
                ('stream_type', models.CharField(max_length=50)),
                ('total_frames', models.IntegerField(default=0)),
                ('processed_frames', models.IntegerField(default=0)),
                ('failed_frames', models.IntegerField(default=0)),
                ('total_bytes', models.BigIntegerField(default=0)),
                ('compressed_bytes', models.BigIntegerField(default=0)),
                ('average_compression_ratio', models.FloatField(default=0.0)),
                ('frames_per_second', models.FloatField(default=0.0)),
                ('bytes_per_second', models.BigIntegerField(default=0)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_frame_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='ACTIVE', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'binary_streaming_stats',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['session_id', 'stream_type'], name='binary_stre_session_eef294_idx'), models.Index(fields=['status', 'started_at'], name='binary_stre_status_b6b808_idx')],
            },
        ),
        migrations.CreateModel(
            name='SensorDataBinary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('session_id', models.CharField(db_index=True, max_length=100)),
                ('sensor_type', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('device_timestamp_ns', models.BigIntegerField()),
                ('binary_data_topic', models.CharField(blank=True, max_length=100, null=True)),
                ('binary_data_offset', models.BigIntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('is_processed', models.BooleanField(default=False)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sensor_data_binary',
                'ordering': ['-device_timestamp_ns'],
                'indexes': [models.Index(fields=['session_id', 'sensor_type', 'device_timestamp_ns'], name='sensor_data_session_96a2ae_idx'), models.Index(fields=['sensor_id'], name='sensor_data_sensor__31a9c7_idx'), models.Index(fields=['timestamp'], name='sensor_data_timesta_0aa3a7_idx')],
            },
        ),
        migrations.CreateModel(
            name='BinaryFrameReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frame_id', models.CharField(db_index=True, max_length=200)),
                ('kafka_topic', models.CharField(max_length=100)),
                ('kafka_partition', models.IntegerField(blank=True, null=True)),
                ('kafka_offset', models.BigIntegerField(blank=True, null=True)),
                ('kafka_timestamp', models.BigIntegerField(blank=True, null=True)),
                ('storage_type', models.CharField(choices=[('KAFKA', 'Kafka Topic'), ('S3', 'S3 Bucket'), ('FILE', 'File System'), ('CACHE', 'Redis Cache')], default='KAFKA', max_length=20)),
                ('storage_path', models.TextField(blank=True, null=True)),
                ('size_bytes', models.BigIntegerField()),
                ('content_type', models.CharField(default='application/octet-stream', max_length=50)),
                ('checksum', models.CharField(blank=True, max_length=64, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.IntegerField(default=0)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('registry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='binary_ref', to='aria_streams.binaryframeregistry')),
            ],
            options={
                'db_table': 'binary_frame_reference',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['frame_id'], name='binary_fram_frame_i_812839_idx'), models.Index(fields=['kafka_topic', 'kafka_offset'], name='binary_fram_kafka_t_2b7584_idx'), models.Index(fields=['storage_type', 'is_available'], name='binary_fram_storage_4622da_idx'), models.Index(fields=['expires_at'], name='binary_fram_expires_317bad_idx')],
            },
        ),
        migrations.CreateModel(
            name='BinaryFrameMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frame_id', models.CharField(db_index=True, max_length=200)),
                ('session_id', models.CharField(max_length=100)),
                ('stream_id', models.CharField(max_length=20)),
                ('frame_index', models.IntegerField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('capture_timestamp_ns', models.BigIntegerField()),
                ('device_timestamp_ns', models.BigIntegerField()),
                ('image_width', models.IntegerField()),
                ('image_height', models.IntegerField()),
                ('channels', models.IntegerField(default=3)),
                ('compression_format', models.CharField(max_length=20)),
                ('compression_quality', models.IntegerField(blank=True, null=True)),
                ('original_size_bytes', models.BigIntegerField()),
                ('compressed_size_bytes', models.BigIntegerField()),
                ('compression_ratio', models.FloatField()),
                ('data_type', models.CharField(default='vrs_frame_binary', max_length=50)),
                ('is_processed', models.BooleanField(default=False)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('registry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='aria_streams.binaryframeregistry')),
            ],
            options={
                'db_table': 'binary_frame_metadata',
                'ordering': ['-capture_timestamp_ns'],
                'indexes': [models.Index(fields=['session_id', 'stream_id', 'frame_index'], name='binary_fram_session_89a6a6_idx'), models.Index(fields=['frame_id'], name='binary_fram_frame_i_5fac00_idx'), models.Index(fields=['capture_timestamp_ns'], name='binary_fram_capture_bcc9b1_idx'), models.Index(fields=['compression_format'], name='binary_fram_compres_6ad584_idx')],
            },
        ),
    ]
